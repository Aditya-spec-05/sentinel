<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PROJECT-SENTINEL | Warning & Alarming System</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        /* --- Base Styles & Dark Theme --- */
        :root {
            --bg-color: #111827;       /* Dark Gray */
            --card-bg-color: #1f2937;  /* Slightly Lighter Gray */
            --border-color: #374151;   /* Medium Gray */
            --text-primary: #f9fafb;   /* Off-White */
            --text-secondary: #9ca3af; /* Lighter Gray Text */
            --accent-color: #06b6d4;   /* Cyan */
            --online-color: #10b981;   /* Green */
            --offline-color: #ef4444;  /* Red */
            --alert-color: #f59e0b;    /* Amber */
        }

        body {
            background-color: var(--bg-color);
            color: var(--text-primary);
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
            line-height: 1.6;
        }

        /* --- Layout --- */
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-bottom: 2rem;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 2rem;
        }

        header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--text-primary);
            margin: 0;
        }
        
        header h1 span {
            color: var(--accent-color);
        }

        .stats {
            text-align: right;
        }

        .stats #online-count {
            font-size: 1.5rem;
            font-weight: 700;
        }

        .stats p {
            margin: 0;
            color: var(--text-secondary);
        }

        .device-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        /* --- Device Card --- */
        .device-card {
            background-color: var(--card-bg-color);
            border-radius: 0.75rem;
            border: 1px solid var(--border-color);
            padding: 1.5rem;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        }

        .device-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.3);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
        }
        
        .card-header h2 {
            margin: 0;
            font-size: 1.5rem;
            font-weight: 700;
        }
        
        .status-indicator {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 500;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.875rem;
        }
        
        .status-indicator.online {
            background-color: rgba(16, 185, 129, 0.1);
            color: var(--online-color);
        }
        
        .status-indicator.offline {
            background-color: rgba(239, 68, 68, 0.1);
            color: var(--offline-color);
        }
        
        .status-indicator .dot {
            width: 0.75rem;
            height: 0.75rem;
            border-radius: 50%;
        }
        
        .status-indicator.online .dot { background-color: var(--online-color); }
        .status-indicator.offline .dot { background-color: var(--offline-color); }

        .card-body {
            padding-top: 1rem;
            border-top: 1px solid var(--border-color);
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .info-item {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            color: var(--text-secondary);
        }

        .info-item .label {
            font-weight: 500;
            color: var(--text-primary);
        }

        .info-item .value.alert-yes {
            color: var(--alert-color);
            font-weight: 700;
        }
        
        .info-item .value.alert-no {
            color: var(--text-secondary);
        }
        
        .info-item .value.alert-count {
            font-weight: 700;
            color: var(--text-primary);
        }
    </style>
</head>
<body>

    <div class="container">
        <header>
            <h1>PROJECT-<span>SENTINEL</span></h1>
            <div class="stats">
                <p id="online-count">--</p>
                <p>Devices Currently Online</p>
            </div>
        </header>

        <main>
            <div class="device-grid" id="device-grid">
                <!-- Device cards will be dynamically inserted here by JavaScript -->
            </div>
        </main>
    </div>

    <script>
        // --- MOCK DATA ---
        // New data structure for the warning and alarming system
        const mockDevices = [
            { id: 'sentinel-001', name: 'Device 1', lat: 28.6139, lng: 77.2090, last_seen: new Date().toISOString(), alert_sent: false, alert_count: 2 },
            { id: 'sentinel-002', name: 'Device 2', lat: 19.0760, lng: 72.8777, last_seen: new Date(Date.now() - 120 * 1000).toISOString(), alert_sent: true, alert_count: 5 },
            { id: 'sentinel-003', name: 'Device 3', lat: 12.9716, lng: 77.5946, last_seen: new Date(Date.now() - 30 * 1000).toISOString(), alert_sent: false, alert_count: 0 },
            { id: 'sentinel-004', name: 'Device 4', lat: 22.5726, lng: 88.3639, last_seen: new Date(Date.now() - 200 * 1000).toISOString(), alert_sent: true, alert_count: 8 },
        ];

        const OFFLINE_TIMEOUT_SECONDS = 90;

        const deviceGrid = document.getElementById('device-grid');
        const onlineCountElement = document.getElementById('online-count');

        /**
         * Renders all devices to the DOM. It clears the existing grid and rebuilds it.
         */
        function renderDevices() {
            // Clear the grid before re-rendering
            deviceGrid.innerHTML = '';
            let onlineDevices = 0;

            mockDevices.forEach(device => {
                const secondsSinceLastSeen = (new Date() - new Date(device.last_seen)) / 1000;
                const isOnline = secondsSinceLastSeen < OFFLINE_TIMEOUT_SECONDS;

                if (isOnline) {
                    onlineDevices++;
                }

                // Create the device card element
                const card = document.createElement('div');
                card.className = 'device-card';
                card.innerHTML = `
                    <div class="card-header">
                        <h2>${device.name}</h2>
                        <div class="status-indicator ${isOnline ? 'online' : 'offline'}">
                            <div class="dot"></div>
                            <span>${isOnline ? 'Online' : 'Offline'}</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="info-item">
                            <span class="label">Location:</span>
                            <span class="value">${device.lat.toFixed(4)}, ${device.lng.toFixed(4)}</span>
                        </div>
                        <div class="info-item">
                            <span class="label">Alert Sent:</span>
                            <span class="value ${device.alert_sent ? 'alert-yes' : 'alert-no'}">
                                ${device.alert_sent ? 'Yes' : 'No'}
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="label">Alert Count:</span>
                            <span class="value alert-count">${device.alert_count}</span>
                        </div>
                        <div class="info-item">
                            <span class="label">Last Seen:</span>
                            <span class="value">${new Date(device.last_seen).toLocaleString()}</span>
                        </div>
                    </div>
                `;
                deviceGrid.appendChild(card);
            });

            // Update the header count
            onlineCountElement.textContent = `${onlineDevices} / ${mockDevices.length}`;
        }

        /**
         * Simulates real-time updates from devices.
         */
        function simulateRealtimeUpdates() {
            mockDevices.forEach(device => {
                const wasOnline = (new Date() - new Date(device.last_seen)) / 1000 < OFFLINE_TIMEOUT_SECONDS;
                
                // Randomly update a device's last_seen timestamp to simulate a heartbeat
                // Devices that are offline have a smaller chance to come back online
                const chanceToUpdate = wasOnline ? 0.7 : 0.2;
                if (Math.random() < chanceToUpdate) {
                    device.last_seen = new Date().toISOString();
                }

                const isNowOnline = (new Date() - new Date(device.last_seen)) / 1000 < OFFLINE_TIMEOUT_SECONDS;

                // --- ALARMING LOGIC ---
                if (wasOnline && !isNowOnline) {
                    // Device just went offline
                    device.alert_sent = true;
                    device.alert_count++;
                    console.log(`ALARM: ${device.name} went offline. Alert count: ${device.alert_count}`);
                } else if (!wasOnline && isNowOnline) {
                    // Device came back online
                    device.alert_sent = false;
                    console.log(`RECOVERY: ${device.name} is back online.`);
                }
            });

            // Re-render the UI with the new data
            renderDevices();
        }

        // --- Initial Load and Interval Setup ---
        document.addEventListener('DOMContentLoaded', () => {
            renderDevices(); // Initial render
            setInterval(simulateRealtimeUpdates, 5000); // Simulate updates every 5 seconds
        });
    </script>
</body>
</html>
